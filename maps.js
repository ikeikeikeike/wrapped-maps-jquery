// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['jquery'], function($) {
    /*
      @name          wrapped-maps-jquery
      @description   A jQuery plugin for Google maps api v3.
      @homepage      https://github.com/ikeikeikeike/wrapped-maps-jquery
      @support_url   https://github.com/ikeikeikeike/wrapped-maps-jquery/issues
    */

    /* Main object
    */

    var MAPSMODULE;
    MAPSMODULE = {};
    MAPSMODULE.module_checker = function() {
      /* Using modules
      */
      try {
        google.maps.Geocoder;
        google.maps.GeocoderStatus;
        google.maps.DirectionsTravelMode;
        google.maps.DirectionsRenderer;
        google.maps.DirectionsService;
        google.maps.DirectionsStatus;
        google.maps.ControlPosition;
        google.maps.InfoWindow;
        google.maps.LatLng;
        google.maps.Map;
        google.maps.Marker;
        google.maps.MapTypeId;
        google.maps.event;
        jQuery("html");
      } catch (error) {
        console.log("[wrapped-maps-jquery] Required module error: " + error + ", Required module in maps.js.");
        return false;
      }
      return true;
    };
    if (MAPSMODULE.module_checker() === false) {
      return MAPSMODULE;
    }
    MAPSMODULE.BaseClass = (function() {

      function BaseClass() {}

      /* Common methods
      */


      /* New object
      */


      BaseClass.prototype.newobj = null;

      BaseClass.prototype.get_options = function() {
        /* Get options
        */
        return this.options;
      };

      BaseClass.prototype.set_options = function(objects) {
        /* Set options by objects
        */

        var key, value, _results;
        _results = [];
        for (key in objects) {
          value = objects[key];
          _results.push(this.options[key] = value);
        }
        return _results;
      };

      BaseClass.prototype.get_newobj = function() {
        /* Get new object
        */
        return this.newobj;
      };

      BaseClass.prototype.set_newobj = function(newobj) {
        return this.newobj = newobj;
        /* Set new object
        */

      };

      BaseClass.prototype.set_value = function(value, el) {
        if (el == null) {
          el = this.el;
        }
        /* Set value to a dom
        */

        if (el.is("[type='text'],textarea")) {
          return el.val(value);
        } else {
          return el.text(value);
        }
      };

      BaseClass.prototype.get_value = function(el) {
        if (el == null) {
          el = this.el;
        }
        /* Get value of a dom
        */

        if (el.is("[type='text'],textarea")) {
          return el.val();
        } else {
          return el.text();
        }
      };

      BaseClass.prototype.compute = function(num) {
        /* Compute lat and lng
        */
        return Math.round(num * 1000000000) / 1000000000;
      };

      return BaseClass;

    })();
    MAPSMODULE.Event = (function() {

      function Event() {}

      /* Wrapped
      */


      Event.event = google.maps.event;

      Event.on = function(object, event, callback) {
        /* Event listener
        */
        return MAPSMODULE.Event.event.addListener(object, event, callback);
      };

      return Event;

    })();
    MAPSMODULE.DirectionsStatue = (function() {
      /* Status Errors
      */

      DirectionsStatue.prototype.statues = [];

      function DirectionsStatue(directions_status) {
        this.directions_status = directions_status != null ? directions_status : google.maps.DirectionsStatus;
        /* Initializer
        */

        this.statues[this.directions_status.INVALID_REQUEST] = 'DirectionsRequest が無効';
        this.statues[this.directions_status.MAX_WAYPOINTS_EXCEEDED] = '経由点がが多すぎます。経由点は 8 以内です。';
        this.statues[this.directions_status.NOT_FOUND] = 'いずれかの点が緯度経度に変換できませんでした。';
        this.statues[this.directions_status.OVER_QUERY_LIMIT] = '単位時間当りのリクエスト制限回数を超えました。';
        this.statues[this.directions_status.REQUEST_DENIED] = 'このサイトからはルートサービスを使用できません。';
        this.statues[this.directions_status.UNKNOWN_ERROR] = '不明なエラーです。もう一度試すと正常に処理される可能性があります。';
        this.statues[this.directions_status.ZERO_RESULTS] = 'ルートを見つけられませんでした。';
      }

      DirectionsStatue.prototype.get_message = function(status) {
        /* Get status message
        */
        return this.statues[status];
      };

      return DirectionsStatue;

    })();
    MAPSMODULE.DirectionsRenderer = (function(_super) {

      __extends(DirectionsRenderer, _super);

      /* Wrapping class
      */


      /* Render options
      */


      DirectionsRenderer.prototype.options = {
        draggable: true
      };

      function DirectionsRenderer(panel_name, options, directions_renderer) {
        this.panel_name = panel_name;
        if (options == null) {
          options = null;
        }
        this.directions_renderer = directions_renderer != null ? directions_renderer : google.maps.DirectionsRenderer;
        /* Initializer
        */

        if (options !== null) {
          this.set_options(options);
        }
        this.set_newobj(new this.directions_renderer(this.options));
        this.set_panel(this.panel_name);
      }

      DirectionsRenderer.prototype.set_map = function(map) {
        /* Set map object
        */
        return this.get_newobj().setMap(map);
      };

      DirectionsRenderer.prototype.set_panel = function(panel_name) {
        if (panel_name == null) {
          panel_name = this.panel_name;
        }
        /* Set panel element name
        */

        return this.get_newobj().setPanel(panel_name);
      };

      DirectionsRenderer.prototype.set_directions = function(results) {
        /* Set directionsService.route response results
        */
        return this.get_newobj().setDirections(results);
      };

      return DirectionsRenderer;

    })(MAPSMODULE.BaseClass);
    MAPSMODULE.DirectionsService = (function(_super) {

      __extends(DirectionsService, _super);

      /* Wrapping class
      */


      /* Route options
      */


      DirectionsService.prototype.options = {
        origin: '',
        destination: '',
        waypoints: '',
        optimizeWaypoints: true,
        avoidHighways: true,
        avoidTolls: true,
        travelMode: google.maps.DirectionsTravelMode.DRIVING
      };

      function DirectionsService(options, directions_service, status) {
        if (options == null) {
          options = null;
        }
        this.directions_service = directions_service != null ? directions_service : google.maps.DirectionsService;
        this.status = status != null ? status : MAPSMODULE.DirectionsStatue;
        /* Initializer
        */

        if (options !== null) {
          this.set_options(this.check_options(options));
        }
        this.set_newobj(new this.directions_service());
        this.status = new this.status();
      }

      DirectionsService.prototype.check_options = function(options) {
        /* Check options
        */

        var d, travelmode;
        travelmode = google.maps.DirectionsTravelMode;
        if (!options.travelMode) {
          options.travelMode = this.options.travelMode;
        } else if (options.travelMode === travelmode.TRANSIT) {
          d = new Date();
          d.setTime(new Date().getTime() + (60 * 60 * 1000));
          options.travelMode = travelmode.TRANSIT;
          options.transitOptions = {
            departureTime: d
          };
          options.unitSystem = google.maps.UnitSystem.IMPERIAL;
        } else if (options.travelMode === travelmode.BICYCLING) {
          console.log(travelmode.BICYCLING);
        } else if (options.travelMode === travelmode.WALKING) {
          console.log(travelmode.WALKING);
        }
        return options;
      };

      DirectionsService.prototype._route = function(callback, options) {
        var self;
        if (options == null) {
          options = this.options;
        }
        /* Request route
        */

        self = this;
        options = this.check_options(options);
        if (this.correspond_beta_for_transit(options)) {
          return this.get_newobj().route(options, function(response, status) {
            var message_, st, status_;
            if (status === google.maps.DirectionsStatus.OK) {
              st = {
                status: status,
                message: '',
                bool: true
              };
            } else {
              status_ = "Directions Service Error: " + status;
              message_ = "\n" + (self.status.get_message(status));
              st = {
                status: status_,
                message: message_,
                bool: false
              };
            }
            return callback(response, st);
          });
        }
      };

      DirectionsService.prototype.route = function(options, callback) {
        if (options == null) {
          options = this.options;
        }
        /* Request route
        */

        return this._route(callback, this.check_options(options));
      };

      DirectionsService.prototype.correspond_beta_for_transit = function(options) {
        var url, w;
        if (options == null) {
          options = this.options;
        }
        /* For transit
        */

        if (this.options.travelMode === google.maps.DirectionsTravelMode.TRANSIT) {
          if (window.confirm("交通機関は現在Beta版のため提供しているAPIが不完全です\n「OK」を選択すると引続きGoogleMaps上で検索します\n\n    https://maps.google.comで検索しますか？")) {
            url = "https://maps.google.co.jp/maps?saddr=" + options.origin + "&daddr=" + options.destination + "&hl=ja&ie=UTF8&sll=35.706586,139.767723&sspn=0.040633,0.076818&ttype=now&noexp=0&noal=0&sort=def&mra=ltm&t=m&z=13&start=0";
            w = window.open();
            w.location.href = url;
            return false;
          }
        }
        return true;
      };

      return DirectionsService;

    })(MAPSMODULE.BaseClass);
    MAPSMODULE.Geocorder = (function(_super) {

      __extends(Geocorder, _super);

      /* Wrapping class
      */


      function Geocorder(geocoder, status) {
        this.geocoder = geocoder != null ? geocoder : google.maps.Geocoder;
        this.status = status != null ? status : google.maps.GeocoderStatus;
        /* Initializer
        */

        this.set_newobj(new this.geocoder());
      }

      Geocorder.prototype.address_to_latlng = function(address, callback) {
        /* Convert from address to latlng
        */

        var _this = this;
        return this.get_newobj().geocode({
          'address': address
        }, function(results, status) {
          var m;
          _this.set_results(results);
          m = status === _this.status.OK ? "ok" : "Geocode was not successful for the following reason: " + status;
          return callback(results, status, m);
        });
      };

      Geocorder.prototype.set_results = function(results) {
        return this.results = results;
        /* Set Geocorder result
        */

      };

      Geocorder.prototype.get_results = function() {
        /* Result all
        */
        return this.results;
      };

      Geocorder.prototype.get_current_location = function() {
        /* Current location
        */
        return this.results[0].geometry.location;
      };

      return Geocorder;

    })(MAPSMODULE.BaseClass);
    MAPSMODULE.Marker = (function(_super) {

      __extends(Marker, _super);

      /* Wrapping class
      */


      /* Marker options
      */


      Marker.prototype.options = {
        position: null,
        map: null,
        title: null
      };

      function Marker(options, marker) {
        this.options = options;
        this.marker = marker != null ? marker : google.maps.Marker;
        /* Initializer
        */

        this.set_newobj(this.get_new());
      }

      Marker.prototype.get_new = function(options) {
        if (options == null) {
          options = this.options;
        }
        /* Get new object
        */

        return new this.marker(options);
      };

      return Marker;

    })(MAPSMODULE.BaseClass);
    MAPSMODULE.InfoWindow = (function(_super) {

      __extends(InfoWindow, _super);

      /* Wrapping class
      */


      InfoWindow.prototype.el = null;

      InfoWindow.prototype.options = {
        el_name: '#info_window',
        map: null,
        marker: null,
        title: null,
        body: null
      };

      InfoWindow.prototype.default_template = "<div class=\"\">\n  <div class=\"modal-header modal-header-wrapper\">\n    <h3>{title}</h3>\n  </div>\n  <div class=\"modal-body\">\n    <span>{body}</span>\n  </div>\n</div>";

      function InfoWindow(options, infowindow) {
        if (options == null) {
          options = null;
        }
        this.infowindow = infowindow != null ? infowindow : google.maps.InfoWindow;
        /* Initializer
        */

        this.el = options.el_name ? $(options.el_name) : $('');
        if (options !== null) {
          this.set_options(options);
        }
        this.set_newobj(this.get_new());
      }

      InfoWindow.prototype.get_new = function() {
        /* Get new object
        */
        return new this.infowindow();
      };

      InfoWindow.prototype.get_content = function(title, body) {
        /*
        */

        var newinfo;
        newinfo = this.get_newobj() || this.get_new();
        newinfo.setContent(this.render_template(title, body));
        return newinfo;
      };

      InfoWindow.prototype.get_template = function() {
        /* Get default template or Element
        */
        if (this.el.is('*')) {
          return this.el.html();
        } else {
          return this.default_template;
        }
      };

      InfoWindow.prototype.render_template = function(title, body) {
        var t, _ref, _ref1;
        if (title == null) {
          title = null;
        }
        if (body == null) {
          body = null;
        }
        /*
        */

        t = this.get_template();
        t = t.replace('{title}', title || ((_ref = this.options) != null ? _ref.title : void 0));
        t = t.replace('{body}', body || ((_ref1 = this.options) != null ? _ref1.body : void 0));
        return t;
      };

      InfoWindow.prototype.open = function(title, body, map, marker) {
        var info;
        if (map == null) {
          map = this.options.map;
        }
        if (marker == null) {
          marker = this.options.marker;
        }
        /* Open info window
        */

        info = this.get_content(title, body);
        info.open(map, marker);
        return info;
      };

      return InfoWindow;

    })(MAPSMODULE.BaseClass);
    MAPSMODULE.Map = (function(_super) {

      __extends(Map, _super);

      /* Wrapped
      */


      /* Render element selector
      */


      Map.prototype.el = null;

      /* Renderer options
      */


      Map.prototype.options = {
        zoom: 14,
        scrollwheel: false,
        scaleControl: true,
        center: null,
        mapTypeId: google.maps.MapTypeId.ROADMAP,
        scaleControlOptions: {
          position: google.maps.ControlPosition.BOTTOM_CENTER
        }
      };

      function Map(el_name, options, map) {
        this.el_name = el_name != null ? el_name : '#googlemaps';
        if (options == null) {
          options = null;
        }
        this.map = map != null ? map : google.maps.Map;
        /* Initializer
        */

        this.el = $(this.el_name);
        if (options !== null) {
          this.set_options(options);
        }
        this.set_newobj(this.get_new());
        this.check_options();
      }

      Map.prototype.check_options = function() {
        /* Checking option
        */
        if (!this.options.center) {
          console.log("[MAP.check_options] Option error: options.center is " + this.options.center);
        }
        if (!this.options.zoom) {
          return console.log("[MAP.check_options] Option error: options.zoom is " + this.options.zoom);
        }
      };

      Map.prototype.get_newobj = function() {
        /* Get newobj
        */
        this.check_options();
        return this.newobj;
      };

      Map.prototype.set_center = function(latlng) {
        /* Google latlng object
        */
        this.set_options({
          center: latlng
        });
        this.get_newobj().setCenter(latlng);
        return this.check_options();
      };

      Map.prototype.get_new = function(el, options) {
        if (el == null) {
          el = this.el;
        }
        if (options == null) {
          options = this.options;
        }
        /* Get new map object
        */

        return new this.map(el.get(0), options);
      };

      Map.prototype.get_address = function() {
        /* Address
        */
        return this.el.attr('address');
      };

      Map.prototype.get_title = function() {
        /* Title
        */
        return this.el.attr('title');
      };

      Map.prototype.get_body = function() {
        /* Title
        */
        return this.el.attr('body');
      };

      Map.prototype.get_content = function() {
        /* Content
        */
        return this.el.attr('content');
      };

      return Map;

    })(MAPSMODULE.BaseClass);
    MAPSMODULE.RouteInfoPanel = (function(_super) {

      __extends(RouteInfoPanel, _super);

      /* Route infomation panel
      */


      /* TOP element
      */


      RouteInfoPanel.prototype.el = null;

      function RouteInfoPanel(el_name) {
        this.el_name = el_name != null ? el_name : '#info_panel';
        /* Initializer
        */

        this.el = $(this.el_name);
      }

      RouteInfoPanel.prototype.set_total_distance = function(results, object) {
        /* Set total distance
        */

        var data, overview_path, routes, _i, _j, _len, _len1, _ref, _ref1;
        data = '';
        _ref = results.routes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          routes = _ref[_i];
          _ref1 = routes.overview_path;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            overview_path = _ref1[_j];
            data += "" + (this.compute(overview_path.lng())) + "," + (this.compute(overview_path.lat())) + "\n";
          }
        }
        return this.set_value(data);
      };

      return RouteInfoPanel;

    })(MAPSMODULE.BaseClass);
    MAPSMODULE.RouteDirectionsPanel = (function(_super) {

      __extends(RouteDirectionsPanel, _super);

      /* Route result panel
      */


      /* TOP element
      */


      RouteDirectionsPanel.prototype.el = null;

      /* Rirections options
      */


      RouteDirectionsPanel.prototype.options = {
        total: '#total'
      };

      function RouteDirectionsPanel(el_name, options) {
        this.el_name = el_name != null ? el_name : '#directions_panel';
        if (options == null) {
          options = null;
        }
        /* Initializer
        @param {String} el_name - Top element name.
        @param {Object} options - options.
        
        .. Options, e.g. ::
        
            options =
              total: '#total'
        */

        this.el = $(this.el_name);
      }

      RouteDirectionsPanel.prototype.set_total_distance = function(results, object) {
        /* Set total distance
        */

        var legs, total, _i, _len, _ref;
        total = 0;
        _ref = results.routes[0].legs;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          legs = _ref[_i];
          total += legs.distance.value;
        }
        return this.el.find(this.options.total).text(total / 1000 + " km");
      };

      return RouteDirectionsPanel;

    })(MAPSMODULE.BaseClass);
    MAPSMODULE.RouteControlPanel = (function(_super) {

      __extends(RouteControlPanel, _super);

      /* Route controller panel
      */


      /* TOP element
      */


      RouteControlPanel.prototype.el = null;

      /* Controller options
      */


      RouteControlPanel.prototype.options = {
        focus: {
          input: true,
          value: true,
          next: true
        },
        start: {
          point: '#start_point',
          checked: '#start_checked'
        },
        end: {
          point: '#end_point',
          checked: '#end_checked'
        },
        way: {
          point: '#way_point',
          checked: '#way_checked',
          nontollway: '#way_nontollway',
          nonhighway: '#way_nonhighway'
        },
        tab: {
          direct: '#tab_direct',
          control: '#tab_control',
          info: '#tab_info'
        },
        travelmode: {
          group: '#travelmode-group'
        },
        erralert: '#erralert',
        event: {
          route: {
            id: '#click_route',
            event: {
              click: function(event, cls) {}
            }
          },
          clearaddr: {
            id: '#click_clearaddr',
            event: {
              click: function(event, cls) {}
            }
          }
        }
      };

      function RouteControlPanel(el_name, options) {
        this.el_name = el_name != null ? el_name : '#control_panel';
        if (options == null) {
          options = null;
        }
        this.on_route = __bind(this.on_route, this);

        this.on_clearaddr = __bind(this.on_clearaddr, this);

        this.show_error = __bind(this.show_error, this);

        /* Initializer
        @param {String} el_name - Top element name.
        @param {Object} options - Contoller options.
        
        .. Options, e.g. ::
        
            options =
              focus:
                input: true
                next: true
              start:
                point: '#start_point'
                checked: '#start_checked'
              end:
                point: '#end_point'
                checked: '#end_checked'
              way:
                point: '#way_point'
                checked: '#way_checked'
                nontollway: '#way_nontollway'
                nonhighway: '#way_nonhighway'
        
              ## event or event ##
              event:
                route: '#click_route'
                clearaddr: '#click_clearaddr'
              event:
                route:
                  id: '#click_route'
                  event:
                    click: (event, cls) ->
                clearaddr:
                  id: '#click_clearaddr'
                  event:
                    click: (event, cls) ->
                    dblclick: (event, cls) -> # TODO: Multiple event, Not implemention.
        */

        this.el = $(this.el_name);
        this.set_selectors(options || this.options);
        if (this.options.focus.value === true) {
          this.push_value();
        }
        if (this.options.focus.input === true) {
          this.focus_input();
        }
        $('#show_control_panel').on('click', function() {
          $('#show_control_panel').addClass("hide");
          return $('#control_panel').removeClass("hide");
        });
        $('#hide_control_panel').on('click', function() {
          $('#control_panel').addClass("hide");
          return $('#show_control_panel').removeClass("hide");
        });
      }

      RouteControlPanel.prototype.set_selectors = function(selectors) {
        /* Controller selectors
        */

        var end, start, way;
        start = selectors != null ? selectors.start : void 0;
        start.checked;
        start.point;
        end = selectors != null ? selectors.end : void 0;
        end.checked;
        end.point;
        way = selectors != null ? selectors.way : void 0;
        way.checked;
        return way.point;
      };

      RouteControlPanel.prototype.generate_html = function(selectors) {
        /* Generate control panel
        */

      };

      RouteControlPanel.prototype.get_selector = function(key) {
        var i, op, _i, _len, _ref;
        op = this.options;
        _ref = key.split(".");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          op = op[i];
        }
        return op;
      };

      RouteControlPanel.prototype.get_element = function(key) {
        /*
        */
        return $(this.get_selector(key));
      };

      RouteControlPanel.prototype.set_value = function(key, value) {
        /* Set value to a panel
        */
        return RouteControlPanel.__super__.set_value.call(this, value, this.get_element(key));
      };

      RouteControlPanel.prototype.get_value = function(key) {
        /* Get value of a panel
        */
        return RouteControlPanel.__super__.get_value.call(this, this.get_element(key));
      };

      RouteControlPanel.prototype.set_value_tostart = function(value) {
        /*
        */
        return this.set_value('start.point', value);
      };

      RouteControlPanel.prototype.set_value_toend = function(value) {
        /*
        */
        return this.set_value('end.point', value);
      };

      RouteControlPanel.prototype.set_value_toway = function(value) {
        /*
        */
        return this.set_value('way.point', "" + (this.get_value('way.point')) + value + "\n");
      };

      RouteControlPanel.prototype.set_point = function(latlng, object) {
        if (object == null) {
          object = null;
        }
        /* Set latLng to dom and next focus.
        */

        if (this.is_checked('start.checked')) {
          this.set_value_tostart(latlng);
          return this.next_focus('start.point');
        } else if (this.is_checked('end.checked')) {
          this.set_value_toend(latlng);
          return this.next_focus('end.point');
        } else if (this.is_checked('way.checked')) {
          this.set_value_toway(latlng);
          return this.scroll_bottom('way.point');
        } else {
          return console.log('[RouteControlPanel.set_point] Not checked error.');
        }
      };

      RouteControlPanel.prototype.is_checked = function(key) {
        /* Check push value element
        */

        var elm;
        elm = this.get_element(key);
        if (elm.attr('checked')) {
          return true;
        } else if (this._push_value_el === null) {
          return false;
        } else if (this._push_value_el.is(elm)) {
          return true;
        } else {
          return false;
        }
      };

      RouteControlPanel.prototype.scroll_bottom = function(key) {
        /* Scroller
        */

        var w;
        w = this.get_element(key);
        return w.scrollTop(w.prop('scrollHeight'));
      };

      RouteControlPanel.prototype.show_direct_tab = function() {
        /* Show tabs
        */
        return this.show_tab(this.options.tab.direct);
      };

      RouteControlPanel.prototype.show_control_tab = function() {
        /* Show tabs
        */
        return this.show_tab(this.options.tab.control);
      };

      RouteControlPanel.prototype.show_tab = function(anchor) {
        /* Show tabs
        */

        var $tab;
        $tab = $("[data-toggle='tab'][href='" + anchor + "']");
        $.Event("click").preventDefault();
        return $tab.click();
      };

      /* Current fucus element
      */


      RouteControlPanel.prototype._push_value_el = null;

      RouteControlPanel.prototype.next_focus = function(key) {
        /* Next focus for input text
        */

        var self;
        self = this;
        if (this.options.focus.next) {
          this.get_element(key === "start.point" ? "end.checked" : key === "end.point" ? "way.checked" : void 0).attr('checked', true);
          return this.get_element(key === "start.point" ? "end.point" : key === "end.point" ? "way.point" : void 0).focus(function() {
            return self._push_value_el = $(this);
          });
        }
      };

      RouteControlPanel.prototype.push_value = function() {
        /* Set current focus
        */

        var self;
        self = this;
        this.get_element('start.point').focus(function() {
          return self._push_value_el = $(this);
        }).blur(function() {
          return self._push_value_el = null;
        });
        this.get_element('end.point').focus(function() {
          return self._push_value_el = $(this);
        }).blur(function() {
          return self._push_value_el = null;
        });
        return this.get_element('way.point').focus(function() {
          return self._push_value_el = $(this);
        }).blur(function() {
          return self._push_value_el = null;
        });
      };

      RouteControlPanel.prototype.focus_input = function() {
        /* Set current focus
        */

        var self;
        self = this;
        this.get_element('start.point').focus(function() {
          return self.get_element('start.checked').attr('checked', true);
        });
        this.get_element('end.point').focus(function() {
          return self.get_element('end.checked').attr('checked', true);
        });
        return this.get_element('way.point').focus(function() {
          return self.get_element('way.checked').attr('checked', true);
        });
      };

      RouteControlPanel.prototype._get_objkey = function(object) {
        /* For one object
        */

        var k, v;
        return ((function() {
          var _results;
          _results = [];
          for (k in object) {
            v = object[k];
            _results.push(k);
          }
          return _results;
        })())[0];
      };

      RouteControlPanel.prototype._get_objvalue = function(object) {
        /* For one object
        */

        var k, v;
        return ((function() {
          var _results;
          _results = [];
          for (k in object) {
            v = object[k];
            _results.push(v);
          }
          return _results;
        })())[0];
      };

      RouteControlPanel.prototype.on = function(object) {
        if (object == null) {
          object = null;
        }
        /* Utility
        */

        return $(object.id).on(object.event, {
          maincallback: object.callback.main,
          usercallback: object.callback.user
        }, object.method);
      };

      RouteControlPanel.prototype.add_route_event = function(callback) {
        /* Add events listener
        */

        var route;
        if (!this.options.event) {
          return this.on({
            id: this.options.event.route,
            event: 'click',
            method: this.on_route,
            callback: {
              main: callback,
              user: null
            }
          });
        } else {
          route = this.options.event.route;
          return this.on({
            id: route.id,
            event: this._get_objkey(route.event),
            method: this.on_route,
            callback: {
              main: callback,
              user: this._get_objvalue(route.event)
            }
          });
        }
      };

      RouteControlPanel.prototype.add_clearaddr_event = function(callback) {
        /* Add events listener
        */

        var clearaddr;
        if (!this.options.event) {
          return this.on({
            id: this.options.event.clearaddr,
            event: 'click',
            method: this.on_clearaddr,
            callback: {
              main: callback,
              user: null
            }
          });
        } else {
          clearaddr = this.options.event.clearaddr;
          return this.on({
            id: clearaddr.id,
            event: this._get_objkey(clearaddr.event),
            method: this.on_clearaddr,
            callback: {
              main: callback,
              user: this._get_objvalue(clearaddr.event)
            }
          });
        }
      };

      RouteControlPanel.prototype.get_travelmode = function() {
        /* Get travelmode
        */
        return this.get_element('travelmode.group').find('.active').val();
      };

      RouteControlPanel.prototype.show_error = function(message, status) {
        /* Show message
        */

        var alt;
        alt = this.get_element('erralert');
        alt.find('strong').text(status);
        alt.find('span').text(message);
        alt.show();
        return alt.find('.close').off("click").on("click", function(e) {
          return $(this).parent().hide();
        });
      };

      RouteControlPanel.prototype.on_clearaddr = function(event) {
        /* Clear form
        */

        var _ref, _ref1;
        this.set_value('start.point', '');
        this.set_value('end.point', '');
        this.set_value('way.point', '');
        this.get_element('start.checked').attr('checked', true);
        this.get_element('way.nonhighway').attr('checked', false);
        this.get_element('way.nontollway').attr('checked', false);
        if ((_ref = event.data) != null) {
          _ref.usercallback(event, this);
        }
        return (_ref1 = event.data) != null ? _ref1.maincallback(event, this) : void 0;
      };

      RouteControlPanel.prototype.on_route = function(event) {
        /* Route search request
        */

        var end, hw, mode, start, toll, wats, waypts, _i, _len, _ref, _ref1, _ref2;
        start = this.get_value('start.point');
        end = this.get_value('end.point');
        hw = this.get_element("way.nonhighway").attr('checked') ? true : false;
        toll = this.get_element("way.nontollway").attr('checked') ? true : false;
        mode = this.get_travelmode();
        waypts = [];
        _ref = this.get_value("way.point").split("\n");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          wats = _ref[_i];
          if (wats !== '') {
            waypts.push({
              location: wats,
              stopover: true
            });
          }
        }
        event.data.control_panel = {
          options: {
            start: start,
            end: end,
            hw: hw,
            toll: toll,
            mode: mode,
            waypts: waypts
          }
        };
        if ((_ref1 = event.data) != null) {
          _ref1.usercallback(event, this);
        }
        return (_ref2 = event.data) != null ? _ref2.maincallback(event, this) : void 0;
      };

      return RouteControlPanel;

    })(MAPSMODULE.BaseClass);
    MAPSMODULE.RenderRouteMap = (function(_super) {

      __extends(RenderRouteMap, _super);

      /* Route map class
      */


      /* Control panel
      */


      RenderRouteMap.prototype.control_panel = MAPSMODULE.RouteControlPanel;

      /* Result panel
      */


      RenderRouteMap.prototype.direct_panel = MAPSMODULE.RouteDirectionsPanel;

      /* Info panel
      */


      RenderRouteMap.prototype.info_panel = MAPSMODULE.RouteInfoPanel;

      /* Direction Renderer object
      */


      RenderRouteMap.prototype.direct_render = MAPSMODULE.DirectionsRenderer;

      /* Direction Service object
      */


      RenderRouteMap.prototype.direct_service = MAPSMODULE.DirectionsService;

      /* Map object
      */


      RenderRouteMap.prototype.map = MAPSMODULE.Map;

      /* Marker object
      */


      RenderRouteMap.prototype.marker = MAPSMODULE.Marker;

      /* InfoWindow object
      */


      RenderRouteMap.prototype.infowindow = MAPSMODULE.InfoWindow;

      /* Event object
      */


      RenderRouteMap.prototype.event = MAPSMODULE.Event;

      /* Geocorder object
      */


      RenderRouteMap.prototype.geocorder = MAPSMODULE.Geocorder;

      function RenderRouteMap(options) {
        if (options == null) {
          options = null;
        }
        /* Initializer
        @param {String|Object} place - Address{String} or Google latlng{Object}.
        @param {Object} options - Options for rendering map.
        
        .. Options, e.g. ::
        
            options =
              direct_panel:
                obj: new RouteDirectionsPanel("#directions_panel")
                name: '#directions_panel'
                options: null
              control_panel:
                obj: new RouteControlPanel("#control_panel")
                name: '#direct_panel'
                options: {}
              info_panel:
                obj: new RouteInfoPanel("#info_panel")
                name: '#info_panel'
                options: {}
              direct_render:
                obj: new DirectionsRenderer('#renderer')
                name: '#renderer'
                options: {}
              map:
                obj: new Map("#map")
                name: '#map'
                options: {}
        */

        this.set_option_class(options, 'direct_panel');
        this.set_option_class(options, 'control_panel');
        this.set_option_class(options, 'info_panel');
        this.set_option_class(options, 'direct_render');
        this.set_option_class(options, 'map');
        this.set_option_class(options, 'geocorder');
        this.place = options != null ? options.place : void 0;
      }

      RenderRouteMap.prototype.set_option_class = function(options, key) {
        /* Set class to attribute
        */

        var name, objs, objs_obj, v;
        objs = options != null ? options[key] : void 0;
        objs_obj = (objs != null ? objs.obj : void 0) || null;
        if (objs_obj !== null) {
          return this[key] = objs_obj;
        } else {
          name = (objs != null ? objs.name : void 0) || null;
          if (name === null) {
            console.log("[RenderRouteMap.constructor] Arguments error: options." + key + ".name is require. (" + key + ".name is " + name + ")");
          }
          return this[key] = new (((function() {
            var _results;
            _results = [];
            for (v in objs != null ? objs.options : void 0) {
              _results.push(v);
            }
            return _results;
          })()).length ? this[key](name, objs.options) : name ? this[key](name) : this[key]);
        }
      };

      RenderRouteMap.prototype.get_latlng = function(place, callback) {
        if (place == null) {
          place = this.place;
        }
        /* Get latlng
        */

        return this.geocorder.address_to_latlng(place || this.map.get_address(), function(results, status, message) {
          return callback(results, status, message);
        });
      };

      RenderRouteMap.prototype.get_marker = function(latlng, title, map) {
        if (title == null) {
          title = this.map.get_title();
        }
        if (map == null) {
          map = this.map.get_newobj();
        }
        /* Get marker object
        */

        return new this.marker({
          position: latlng,
          title: title,
          map: map
        });
      };

      RenderRouteMap.prototype.get_infowindow = function(marker, title, map) {
        if (title == null) {
          title = this.map.get_title();
        }
        if (map == null) {
          map = this.map.get_newobj();
        }
        /* Open info window
        */

        marker = (marker != null ? marker.get_newobj() : void 0) || marker;
        return new this.infowindow({
          marker: marker,
          map: map,
          title: title
        });
      };

      RenderRouteMap.prototype.open_infowindow = function(marker, title, body) {
        var infowindow;
        if (title == null) {
          title = this.map.get_title();
        }
        if (body == null) {
          body = this.map.get_body();
        }
        /*
        */

        infowindow = this.get_infowindow(marker);
        infowindow.open(title, body);
        return infowindow;
      };

      RenderRouteMap.prototype.set_map = function(map) {
        if (map == null) {
          map = this.map.get_newobj();
        }
        /* Set map
        */

        return this.direct_render.set_map(map);
      };

      RenderRouteMap.prototype.set_direct_panel = function(direct_panel_el) {
        if (direct_panel_el == null) {
          direct_panel_el = this.direct_panel.el;
        }
        /* Set panel
        */

        if (direct_panel_el.is('*')) {
          return this.direct_render.set_panel(direct_panel_el.get(0));
        } else {
          return console.log("[RenderRouteMap.set_direct_panel] Arguments error: (direct_panel_el is " + direct_panel_el + ")");
        }
      };

      RenderRouteMap.prototype.run = function(options) {
        var _this = this;
        if (options == null) {
          options = {};
        }
        /* Render map
        */

        return this.get_latlng(options != null ? options.place : void 0, function(results, status, message) {
          /* Current latlng
          */

          var infowindow, marker;
          _this.map.set_center(_this.geocorder.get_current_location());
          _this.set_map();
          _this.set_direct_panel();
          marker = _this.get_marker(_this.geocorder.get_current_location());
          infowindow = _this.open_infowindow(marker);
          /* Event receivers
          */

          _this.control_panel.add_clearaddr_event(function(event, cls) {
            /* On submit clear input values.
            */

          });
          _this.control_panel.add_route_event(function(event, cls) {
            /* On submit route search
            */

            var service;
            options = event.data.control_panel.options;
            service = new _this.direct_service({
              origin: options.start,
              destination: options.end,
              waypoints: options.waypts,
              optimizeWaypoints: true,
              avoidHighways: options.hw,
              avoidTolls: options.toll,
              travelMode: options.mode
            });
            return service._route(function(response, status) {
              /* request calc route
              */
              if (status.bool) {
                _this.control_panel.show_direct_tab();
                _this.direct_render.set_directions(response);
                return _this.info_panel.set_total_distance(response);
              } else {
                return _this.control_panel.show_error(status.message, status.status);
              }
            });
          });
          _this.event.on(marker.get_newobj(), 'click', function(event) {
            /* Mouse event receiver
            */
            return _this.open_infowindow(marker);
          });
          _this.event.on(_this.map.get_newobj(), 'click', function(event) {
            /* Mouse event receiver
            */
            _this.control_panel.show_control_tab();
            return _this.control_panel.set_point(event.latLng, _this.map.get_newobj());
          });
          return _this.event.on(_this.direct_render.get_newobj(), 'click', function(event) {
            /* Directions changed event receiver
            */

            var newobj;
            newobj = _this.direct_render.get_newobj();
            _this.direct_panel.set_total_distance(newobj.directions, newobj);
            return _this.info_panel.set_total_distance(newobj.directions, newobj);
          });
        });
      };

      return RenderRouteMap;

    })(MAPSMODULE.BaseClass);
    return MAPSMODULE;
  });

}).call(this);
